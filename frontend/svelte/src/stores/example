

Just for reference, here's a basic working store implemented from scratch:

export const writable = (initial_value = 0) => {

  let value = initial_value         // content of the store
  let subs = []                     // subscriber's handlers

  const subscribe = (handler) => {
    subs = [...subs, handler]                                 // add handler to the array of subscribers
    handler(value)                                            // call handler with current value
    return () => subs = subs.filter(sub => sub !== handler)   // return unsubscribe function
  }

  const set = (new_value) => {
    if (value === new_value) return         // same value, exit
    value = new_value                       // update value
    subs.forEach(sub => sub(value))         // update subscribers
  }

  const update = (update_fn) => set(update_fn(value))   // update function

  return { subscribe, set, update }       // store contract
}



Usually you don't implement stores from scratch; instead you'd use the writable store to create custom stores with domain-specific logic.
In the following example we create a counter store, which will only allow us to add one to the counter or reset its value:

import { writable } from 'svelte/store';
function myStore() {
  const { subscribe, set, update } = writable(0);

  return {
    subscribe,
    addOne: () => update(n => n + 1),
    reset: () => set(0)
  };
}


If our To-do list app gets too complex, we could let our todos store handle every state modification.
We could move all the methods that modify the todo array (like addTodo(), removeTodo(), etc) from our Todos component to the store.
If you have a central place where all the state modification is applied,
components could just call those methods to modify the app's state and reactively display the info exposed by the store.
Having a unique place to handle state modifications makes it easier to reason about the state flow and spot issues.

Svelte won't force you to organize your state management in a specific way, it just provides the tools for you to choose how to handle it.










